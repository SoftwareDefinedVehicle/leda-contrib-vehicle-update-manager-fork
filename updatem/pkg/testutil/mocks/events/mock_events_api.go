// Copyright (c) 2022 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// This program and the accompanying materials are made available under the
// terms of the Apache License 2.0 which is available at
// https://www.apache.org/licenses/LICENSE-2.0
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/eclipse-leda/leda-contrib-vehicle-update-manager/updatem/events (interfaces: UpdateEventsManager)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	events "github.com/eclipse-leda/leda-contrib-vehicle-update-manager/updatem/events"
	gomock "github.com/golang/mock/gomock"
)

// MockUpdateEventsManager is a mock of UpdateEventsManager interface.
type MockUpdateEventsManager struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateEventsManagerMockRecorder
}

// MockUpdateEventsManagerMockRecorder is the mock recorder for MockUpdateEventsManager.
type MockUpdateEventsManagerMockRecorder struct {
	mock *MockUpdateEventsManager
}

// NewMockUpdateEventsManager creates a new mock instance.
func NewMockUpdateEventsManager(ctrl *gomock.Controller) *MockUpdateEventsManager {
	mock := &MockUpdateEventsManager{ctrl: ctrl}
	mock.recorder = &MockUpdateEventsManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateEventsManager) EXPECT() *MockUpdateEventsManagerMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockUpdateEventsManager) Publish(arg0 context.Context, arg1 *events.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockUpdateEventsManagerMockRecorder) Publish(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockUpdateEventsManager)(nil).Publish), arg0, arg1)
}

// Subscribe mocks base method.
func (m *MockUpdateEventsManager) Subscribe(arg0 context.Context) (<-chan *events.Event, <-chan error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0)
	ret0, _ := ret[0].(<-chan *events.Event)
	ret1, _ := ret[1].(<-chan error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockUpdateEventsManagerMockRecorder) Subscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockUpdateEventsManager)(nil).Subscribe), arg0)
}
